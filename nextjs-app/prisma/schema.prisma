// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

enum TrainingStatus {
  IN_PROGRESS
  DONE
}

model User {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  name              String?     @unique
  email             String?     @unique
  phone             String?
  emailVerified     DateTime?
  image             String?
  password          String?     // null for Google
  passwordChangedAt DateTime?
  accounts          Account[]
  sessions          Session[]
  exercises         Exercise[]
  trainings         Training[]
  passwordResetTokens PasswordResetToken[]
  payments          Payment[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
}

model PasswordResetToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  userId     String?  @db.ObjectId
  user       User?    @relation(fields: [userId], references: [id])
  tokenHash  String   @unique
  expires    DateTime
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([identifier])
  @@index([userId])
}

model Exercise {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  trainings   TrainingExercise[]
  createdAt   DateTime @default(now())
}

model Training {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @db.ObjectId
  exercises   TrainingExercise[]
  status      TrainingStatus @default(DONE)
  createdAt   DateTime    @default(now())
}

model TrainingExercise {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  training    Training  @relation(fields: [trainingId], references: [id])
  trainingId  String    @db.ObjectId
  exercise    Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId  String    @db.ObjectId
  weight      Float?
  sets        Int
  reps        Int
}

model Payment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?  @db.ObjectId
  user        User?    @relation(fields: [userId], references: [id])
  email       String?
  phone       String?
  productName String?
  paymentType String
  amount      Int?
  currency    String?
  source      String?
  externalId  String?  @unique
  createdAt   DateTime @default(now())
  processedAt DateTime?
  metadata    Json?
  notes       String?

  @@index([userId])
  @@index([email])
}
